server:
  port: 8080
  servlet:
    context-path: /api

spring:
  main:
    lazy-initialization: true
  jmx:
    enabled: false
  application:
    name: test

  # database
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/test?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
    username: ${db.username:root}
    password: ${db.password:Admin@123}
  jpa:
    hibernate:
      ddl-auto: none
    generate-ddl: true
    open-in-view: false
    show-sql: true

  # i18n
  messages:
    basename: i18n/messages
    encoding: UTF-8

  # hashicorp/vault
  config:
    import: vault://
  cloud:
    vault:
      uri: http://127.0.0.1:8200
      authentication: TOKEN
      token: vault-root-token
      kv:
        enabled: true
        backend: secret

    # Cloud stream - kafka
    stream:
      bindings:
        category-out-0:
          destination: serviceA-topic
        product-out-0:
          destination: serviceB-topic
      kafka:
        binder:
          brokers: localhost:9092
          replication-factor: 1
          min-partition-count: 2
          auto-add-partitions: true
          auto-create-topics: true
      binders:
        kafka1:
          type: kafka
          environment:
            spring: { cloud: { stream: { kafka: { binder: { brokers: localhost:9092, zkNodes: localhost:2181 } } } } }

  # caching/redis
  cache:
    type: redis
  data:
    redis:
      host: localhost
      port: 6379

  # Security
#  security:
#    oauth2:
#      client:
#        registration:
#          keycloak:
#            client-id: demo-client
#            client-secret: Zg0rKiVASypzfuBiZa27EfcGmLgNOQlT
#            scope: openid, profile, email
#            authorization-grant-type: authorization_code
#            redirect-uri: "http://localhost:8080/login/oauth2/code/demo-client"
#        provider:
#          keycloak:
#            issuer-uri: http://localhost:8180/realms/master
#      resourceserver:
#        jwt:
#          jwk-set-uri: http://localhost:8180/realms/master/protocol/openid-connect/certs

logging:
  file:
    name: logs/access_log.log
  level:
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
  logback:
    rollingpolicy:
      max-history: 7
      clean-history-on-start: true
  charset:
    console: UTF-8

dubbo:
  application:
    name: dubbo-provider-demo
    logger: slf4j
  protocol:
    name: dubbo
    port: 20880
  registry:
    address: zookeeper://127.0.0.1:2181

# Resilience4j
## circuitbreaker
resilience4j.circuitbreaker:
  instances:
    circuitbreaker-conf:
      register-health-indicator: true
      failure-rate-threshold: 50
      wait-duration-in-open-state:
        seconds: 10
      permitted-number-of-calls-in-half-open-state: 10
      sliding-window-size: 100
## retry
resilience4j.retry:
  instances:
    retry-conf:
      max-attempts: 3
      wait-duration:
        seconds: 5
## rate limit
resilience4j.ratelimiter:
  instances:
    rateLimit-conf:
      limit-for-period: 10
      limit-refresh-period:
        seconds: 5
## bulkhead
resilience4j.bulkhead:
  instances:
    bulkhead-conf:
      max-concurrent-calls: 5
      max-wait-duration:
        seconds: 5
## time limit
resilience4j.timelimiter:
  instances:
    timeLimit-conf:
      timeout-duration:
        seconds: 3

springdoc:
  swagger-ui:
    path: /swagger-ui.html
  api-docs:
    path: /v3/api-docs
  packages-to-scan: com.example.test.controller